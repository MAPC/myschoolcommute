# 4:
# Merge gmSbse_df with et_df: Enrollment by Grade
# Fills
# Column
# Enroll
gmSbse_df_morning <- mergeDF(gmSbse_df_morning,
et_df,
data.column1 = "Enroll",
data.column2 = "value",
by.x = "Grade",
by.y = "variable")
gmSbse_df_afternoon <- mergeDF(gmSbse_df_afternoon,
et_df,
data.column1 = "Enroll",
data.column2 = "value",
by.x = "Grade",
by.y = "variable")
gmSbse_df_morning <-  subset(gmSbse_df_morning,Enroll > 0)
gmSbse_df_morning <-  droplevels(gmSbse_df_morning)
gmSbse_df_afternoon <-  subset(gmSbse_df_afternoon,Enroll > 0)
gmSbse_df_afternoon <-  droplevels(gmSbse_df_afternoon)
# 5.5 check if reported grades match actual grades:
if (sum(gmSbse_df_morning$Grade_Surveyed) == 0){
knit2pdf("compile_no_school_code.Rnw")
school_name_no_space <- gsub("\\s","",School_Name)
file.rename("compile_no_school_code.pdf",paste("Reports/",paste(school_name_no_space,".pdf",sep=""),sep=""))
stop()
}
# 6:
# Sum students by buffer
# mSb_df_morning <- ddply(gmSbse_df_morning,
#                         .(Mode,Buffer),
#                         summarise,
#                         Estimate = sum(Surveyed*Enroll/Grade_Surveyed,na.rm=T))
mSb_df_morning <- ddply(gmSbse_df_morning,
.(Mode,Buffer),
summarise,
Estimate = sum(ifelse(Grade_Surveyed > 0,
Surveyed*Enroll/Grade_Surveyed,
0)))
mSb_df_afternoon <- ddply(gmSbse_df_afternoon,
.(Mode,Buffer),
summarise,
Estimate = sum(Surveyed*Enroll/Grade_Surveyed,na.rm=T))
mSb_df_morning$time <- "Morning"
mSb_df_afternoon$time <- "Afternoon"
mSb_df <- rbind(mSb_df_morning,mSb_df_afternoon)
##### Begin New Code #####
# create table of mode by morning/afternoon and walkshed
mSb_df_for_latex <-
rbind(aggregate(mSb_df_morning$Estimate,
by=list(mSb_df_morning$Mode),
t),
aggregate(mSb_df_afternoon$Estimate,
by=list(mSb_df_morning$Mode),
t))
mSb_df_for_latex <- as.data.frame(lapply(as.data.frame(round(mSb_df_for_latex$x,0)),
as.character))
##### End New Code #####
############### End Student Travel Choices ###################
############### Begin Greenhouse Gas Emissions ###################
## converts mSb_df into mSb_df_wide to pass to latex function
mSb_df_wide_morning <- modeDFwideFunction(mSb_df[mSb_df$time=="Morning",c("Mode","Buffer","Estimate")])
mSb_df_wide_morning[,2:6] <- round(mSb_df_wide_morning[,2:6],0)
mSb_df_wide_morning[,2:6] <- lapply(mSb_df_wide_morning[,2:6],as.character)
mSb_df_wide_morning_pct <- mSb_df_wide_morning[,c(1,7:11)]
mSb_df_wide_afternoon <- modeDFwideFunction(mSb_df[mSb_df$time=="Afternoon",c("Mode","Buffer","Estimate")])
mSb_df_wide_afternoon[,2:6] <- round(mSb_df_wide_afternoon[,2:6],0)
mSb_df_wide_afternoon[,2:6] <- lapply(mSb_df_wide_afternoon[,2:6],as.character)
mSb_df_wide_afternoon_pct <- mSb_df_wide_afternoon[,c(1,7:11)]
ghgBufferDFgeneric <- data.frame(Buffer = buffers,
Students = 0,
Ghg_Total = 0)
ghgBufferDF <- ddply(DF,
.(BUFF_DIST, grade),
summarise,
students = length(id),
ghg_Total = 180*sum(ghg_Total))
ghgBufferDF <- subset(ghgBufferDF, grade %in% grades_exist)
ghgBufferDF <- droplevels(ghgBufferDF)
ghgBufferDF <- ddply(ghgBufferDF,
.(BUFF_DIST),
summarise,
students = sum(students),
ghg_Total = sum(ghg_Total))
ghgBufferDF <- ghgBufferDF[!is.na(ghgBufferDF$BUFF_DIST) & ghgBufferDF$BUFF_DIST != "",]
ghgBufferDFgeneric <-   mergeDF(ghgBufferDFgeneric,
ghgBufferDF,
data.column1 = "Students",
data.column2 = "students",
by.x = "Buffer",
by.y = "BUFF_DIST")
ghgBufferDFgeneric <-   mergeDF(ghgBufferDFgeneric,
ghgBufferDF,
data.column1 = "Ghg_Total",
data.column2 = "ghg_Total",
by.x = "Buffer",
by.y = "BUFF_DIST")
ghgBufferDFgeneric$studentsEst <- round(enrollTotal*ghgBufferDFgeneric$Students/(sum(ghgBufferDFgeneric$Students)),0)
ghgBufferDFgeneric$ghgEst <- ifelse(ghgBufferDFgeneric$Students > 0,
ghgBufferDFgeneric$studentsEst*ghgBufferDFgeneric$Ghg_Total/ghgBufferDFgeneric$Students,
0)
ghgBufferDFgeneric$ghgEstPerCap <- ifelse(ghgBufferDFgeneric$studentsEst > 0,
ghgBufferDFgeneric$ghgEst/ghgBufferDFgeneric$studentsEst,
0)
totGhGest <- sum(ghgBufferDFgeneric$ghgEst,na.rm=T)
if (totGhGest > 0){
ghgBufferDFgeneric$PctTotGHG <- ghgBufferDFgeneric$ghgEst/totGhGest
} else {ghgBufferDFgeneric$PctTotGHG <- 0}
ghgPerCap10Buffer <- ifelse(sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")],na.rm=T) > 0,
(sum(ghgBufferDFgeneric$ghgEstPerCap[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")]*ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")],na.rm=T))/
sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")],na.rm=T),
0)
ghgPerCap10PlusBuffer <- ifelse(sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")],na.rm=T) > 0,
(sum(ghgBufferDFgeneric$ghgEstPerCap[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")]* ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")],na.rm=T)/
sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")],na.rm=T)),
0)
ghgPerCap <- ifelse(sum(ghgBufferDFgeneric$studentsEst,na.rm=T) > 0,
sum(ghgBufferDFgeneric$ghgEst,na.rm=T)/sum(ghgBufferDFgeneric$studentsEst,na.rm=T),
0)
ghgBufferDFgeneric$PctTotGHGprint <- addPct(100*ghgBufferDFgeneric$PctTotGHG)
ghgBufferDFgeneric$ghgEst <- round(ghgBufferDFgeneric$ghgEst,0)
ghgBufferDFgeneric$ghgEstPerCap <- round(ghgBufferDFgeneric$ghgEstPerCap,0)
ghgBufferDFgeneric[,2:6] <- lapply(ghgBufferDFgeneric[,2:6],as.character)
################### End  Greenhouse Gas Emissions ########################
#
rangeBufferDF = aggregate(mSb_df_morning$Estimate,
by=list(mSb_df_morning$Mode),t)
rangeBufferDF[,2] = rangeBufferDF[,2] +
aggregate(mSb_df_afternoon$Estimate,
by=list(mSb_df_afternoon$Mode),t)[,2]
rangeBufferDFMorning = ddply(mSb_df_morning,
.(Mode, Buffer),
summarise,
Estimate = sum(Estimate))
rangeBufferDFAfternoon = ddply(mSb_df_afternoon,
.(Mode, Buffer),
summarise,
Estimate = sum(Estimate))
rangeBufferDF = rangeBufferDFMorning
rangeBufferDF$Estimate = rangeBufferDF$Estimate + rangeBufferDFAfternoon$Estimate
rangeBufferDF = ddply(rangeBufferDF,
.(Buffer),
transform,
BufferTotal = sum(Estimate))
rangeBufferDF$bufferShare = ifelse(rangeBufferDF$BufferTotal > 0,
100*rangeBufferDF$Estimate/rangeBufferDF$BufferTotal,
0)
gradeRangeBufferDF = mergeDF(gradeRangeBuffer(),
count(DF,.(gradeRanges,BUFF_DIST)),
by.x = c("gradeRange", "Buffer"),
by.y = c("gradeRanges", "BUFF_DIST"),
data.column1 = "Count",
data.column2 = "freq")
gradeRangeBufferDF$Count = 2*gradeRangeBufferDF$Count
gradeRangeBufferDF$average = 0
gradeRangeBufferDF = mergeDF(gradeRangeBufferDF,
surveysGradeBuffer,
by.x = c("gradeRange", "Buffer"),
by.y = c("gradeRanges", "BUFF_DIST"),
data.column1 = "average",
data.column2 = "Expected")
gradeRangeBufferDF$Expected = gradeRangeBufferDF$Count*gradeRangeBufferDF$average
bufferByModeDF = ddply(gradeRangeBufferDF,
.(Buffer),
summarise,
count = sum(Count),
expected = sum(Expected))
bufferByModeDF$actual = 0
bufferByModeDF = mergeDF(bufferByModeDF,
count(DF[DF$ModeToMod == "Walk",],
.(BUFF_DIST)),
by.x = c("Buffer"),
by.y = c("BUFF_DIST"),
data.column1 = "actual",
data.column2 = "freq")
bufferByModeDF$expectedPct = ifelse(bufferByModeDF$count > 0,
100*bufferByModeDF$expected/bufferByModeDF$count,
0)
bufferByModeDF$actualPct = ifelse(bufferByModeDF$count > 0,
100*bufferByModeDF$actual/bufferByModeDF$count,
0)
bufferByModeDFLatex = as.data.frame(t(bufferByModeDF[,c("actualPct","expectedPct")]))
row.names(bufferByModeDFLatex) = c("Actual", "Expected")
## create scenarios for How Your School Compares
rangeBufferDF
gradeRangeBufferDF = mergeDF(gradeRangeBuffer(),
count(DF,.(gradeRanges,BUFF_DIST)),
by.x = c("gradeRange", "Buffer"),
by.y = c("gradeRanges", "BUFF_DIST"),
data.column1 = "Count",
data.column2 = "freq")
gradeRangeBufferDF$Count = 2*gradeRangeBufferDF$Count
gradeRangeBufferDF$average = 0
gradeRangeBufferDF = mergeDF(gradeRangeBufferDF,
surveysGradeBuffer,
by.x = c("gradeRange", "Buffer"),
by.y = c("gradeRanges", "BUFF_DIST"),
data.column1 = "average",
data.column2 = "Expected")
gradeRangeBufferDF$Expected = gradeRangeBufferDF$Count*gradeRangeBufferDF$average
bufferByModeDF = ddply(gradeRangeBufferDF,
.(Buffer),
summarise,
count = sum(Count),
expected = sum(Expected))
bufferByModeDF$actual = 0
bufferByModeDF = mergeDF(bufferByModeDF,
count(DF[DF$ModeToMod == "Walk",],
.(BUFF_DIST)),
by.x = c("Buffer"),
by.y = c("BUFF_DIST"),
data.column1 = "actual",
data.column2 = "freq")
bufferByModeDF$expectedPct = ifelse(bufferByModeDF$count > 0,
100*bufferByModeDF$expected/bufferByModeDF$count,
0)
bufferByModeDF$actualPct = ifelse(bufferByModeDF$count > 0,
100*bufferByModeDF$actual/bufferByModeDF$count,
0)
bufferByModeDF
rangeBufferDF
rangeBufferDF[rangeBufferDF$Mode == "Walk","bufferShare"]
bufferByModeDF$actualPct = rangeBufferDF[rangeBufferDF$Mode == "Walk","bufferShare"]
bufferByModeDFLatex = as.data.frame(t(bufferByModeDF[,c("actualPct","expectedPct")]))
row.names(bufferByModeDFLatex) = c("Actual", "Expected")
bufferByModeDFLatex
source("compile.R")
1/6
View(surveys)
sum(!is.na(surveys$distance) & surveys$shed == 4)
sum(!is.na(surveys$distance) & surveys$shed == "4")
sum(!is.na(surveys$distance) & surveys$shed == "4", na.rm = T)
sum(is.na(surveys$distance) & surveys$shed == "4", na.rm = T)
sum(!is.na(surveys$distance) & surveys$shed == "0", na.rm = T)
sum(is.na(surveys$distance) & surveys$shed == "0", na.rm = T)
View(surveys[survyes$shed == "0",])
View(surveys[surveys$shed == "0",])
nrow(surveys[!is.na(surveys$distance),])
surveys = surveys[!is.na(surveys$distance),]
lowGrades = c("p", "k", as.character(1:3))
midGrades = as.character(4:7)
highGrades = as.character(8:12)
gradeRanges = ifelse(surveys$grade %in% lowGrades, "low",
ifelse(surveys$grade %in% midGrades, "mid",
"high"))
surveys$gradeRanges = gradeRanges
surveys$BUFF_DIST = ifelse(surveys$shed == 0, "2.0+",
ifelse(surveys$shed ==  1, "0.5",
ifelse(surveys$shed ==  2, "1.0",
ifelse(surveys$shed ==  3, "1.5",
"2.0"))))
# relabel the values in ModeTo and ModeFrom columns (e.g. fv -> Family Vehicle)
surveys$ModeTo <- mode_labels(surveys$to_school)
surveys$ModeFrom <- mode_labels(surveys$from_school)
# create ModeToMod and ModeFromMod from the ModeTo and ModeFrom columns, respectively
surveys$ModeToMod <- mode_simple(surveys$ModeTo)
surveys$ModeFromMod <- mode_simple(surveys$ModeFrom)
surveysGradeBuffer = count(surveys,.(gradeRanges,BUFF_DIST))
surveysGradeBuffer$freq = 2*surveysGradeBuffer$freq
surveysGradeBuffer$Walk = 0
surveysGradeBufferModeTo = count(surveys[surveys$ModeToMod == "Walk",],
.(gradeRanges, BUFF_DIST))
names(surveysGradeBufferModeTo)[3] = "Walked"
surveysGradeBufferModeFrom = count(surveys[surveys$ModeFromMod == "Walk",],
.(gradeRanges, BUFF_DIST))
names(surveysGradeBufferModeFrom)[3] = "Walked"
surveysGradeBuffer = mergeDF(surveysGradeBuffer,
surveysGradeBufferModeTo,
by.x = c("gradeRanges", "BUFF_DIST"),
by.y = c("gradeRanges", "BUFF_DIST"),
data.column1 = "Walk",
data.column2 = "Walked")
surveysGradeBuffer = mergeDF(surveysGradeBuffer,
surveysGradeBufferModeFrom,
by.x = c("gradeRanges", "BUFF_DIST"),
by.y = c("gradeRanges", "BUFF_DIST"),
data.column1 = "Walk",
data.column2 = "Walked")
surveysGradeBuffer$Expected = surveysGradeBuffer$Walk/surveysGradeBuffer$freq
source("compile.R")
bufferByModeDF
rangeBufferDF
bufferByModeDF
bufferByModeDF$bufferTotal = rangeBufferDF[rangeBufferDF$Mode == "Auto","BufferTotal"]
bufferByModeDF
bufferByModeDF$extraWalk = ifelse(bufferByModeDF$expectedPct > bufferByModeDF$actualPct,
(bufferByModeDF$expectedPct - bufferByModeDF$actualPct)*bufferByModeDF$bufferTotal/100,
0)
bufferByModeDF
bufferByModeDF$bufferTotal = rangeBufferDF[rangeBufferDF$Mode == "Auto","bufferShare"]
bufferByModeDF
bufferByModeDF$bufferTotal = rangeBufferDF[rangeBufferDF$Mode == "Auto","BufferTotal"]
# calculate extra walk trips needed to achieve expected walk share
# if walk share is already above expected, return 0
bufferByModeDF$extraWalk = ifelse(bufferByModeDF$expectedPct > bufferByModeDF$actualPct,
(bufferByModeDF$expectedPct - bufferByModeDF$actualPct)*bufferByModeDF$bufferTotal/100,
0)
# add auto share
bufferByModeDF$autoTotal = rangeBufferDF[rangeBufferDF$Mode == "Auto","bufferShare"]
bufferByModeDF
bufferByModeDF$autoReduced = ifelse(bufferByModeDF$autoTotal > bufferByModeDF$extraWalk,
bufferByModeDF$extraWalk,
bufferByModeDF$autoTotal)
bufferByModeDF
totalMinutesWalking = sum(bufferByModeDF$extraWalk*(7.5*1:5))
totalMinutesWalking
newWalkers = sum(bufferByModeDF$extraWalk)/2
newWalkers
avgMinutesWalking = totalMinutesWalking/newWalkers
avgMinutesWalking
"pickUpDropOffDist" %in% ls()
0.99/1.5
0.66+2
0.66*2
0.66*.5
ghgReduction(x){
# input: x is vector of vehicle trip reduction by buffer
# output: list of lowest GHG reduction and highest GHG reduction
# (actual GHG reduction depends on how many trips are dedicated)
distLow = c(0.26, 0.595, 0.99, 0.66*2, 0.66*2.5)*x
distHigh = c(0.5, 1, 1.5, 2, 2.5)*x
ghgLow = sum(1.8*distLow/(21.0*0.634 + 17.0*0.366)*8.8)
ghgHigh = sum(1.8*distHigh/(21.0*0.634 + 17.0*0.366)*8.8)
return(list(ghgLow = ghgLow, ghgHigh = ghgHigh))
}
ghgReduction(x){
# input: x is vector of vehicle trip reduction by buffer
# output: list of lowest GHG reduction and highest GHG reduction
# (actual GHG reduction depends on how many trips are dedicated)
distLow = c(0.26, 0.595, 0.99, 0.66*2, 0.66*2.5)*x
distHigh = c(0.5, 1, 1.5, 2, 2.5)*x
ghgLow = sum(1.8*distLow/(21.0*0.634 + 17.0*0.366)*8.8)
ghgHigh = sum(1.8*distHigh/(21.0*0.634 + 17.0*0.366)*8.8)
return(list("ghgLow" = ghgLow, "ghgHigh" = ghgHigh))
}
ghgReduction = function(x){
# input: x is vector of vehicle trip reduction by buffer
# output: list of lowest GHG reduction and highest GHG reduction
# (actual GHG reduction depends on how many trips are dedicated)
distLow = c(0.26, 0.595, 0.99, 0.66*2, 0.66*2.5)*x
distHigh = c(0.5, 1, 1.5, 2, 2.5)*x
ghgLow = sum(1.8*distLow/(21.0*0.634 + 17.0*0.366)*8.8)
ghgHigh = sum(1.8*distHigh/(21.0*0.634 + 17.0*0.366)*8.8)
return(list("ghgLow" = ghgLow, "ghgHigh" = ghgHigh))
}
ghgReduction(bufferByModeDF$autoReduced)
14.66907*200
ghgReduction = function(x){
# input: x is vector of vehicle trip reduction by buffer
# output: list of lowest GHG reduction and highest GHG reduction
# (actual GHG reduction depends on how many trips are dedicated)
distLow = c(0.26, 0.595, 0.99, 0.66*2, 0.66*2.5)*x
distHigh = c(0.5, 1, 1.5, 2, 2.5)*x
CO2Low = sum(1.8*distLow/(21.0*0.634 + 17.0*0.366)*8.8)
CO2High = sum(1.8*distHigh/(21.0*0.634 + 17.0*0.366)*8.8)
ghg_OtherLow = CO2Low/19
ghg_OtherHigh = CO2High/19
cold_startLow = ifelse(CO2Low > 0.0, 0.035,CO2Low)
cold_startHigh = ifelse(CO2High > 0.0, 0.035,CO2High)
ghg_TotalLow <- CO2Low + ghg_OtherLow + cold_startLow
ghg_TotalHigh <- CO2High + ghg_OtherHigh + cold_startHigh
return(list("ghgLow" = ghgLow, "ghgHigh" = ghgHigh))
}
ghgReduction(bufferByModeDF$autoReduced)
bufferByModeDF$autoReduced
ghgReduction = function(x){
# input: x is vector of vehicle trip reduction by buffer
# output: list of lowest GHG reduction and highest GHG reduction
# (actual GHG reduction depends on how many trips are dedicated)
distLow = c(0.26, 0.595, 0.99, 0.66*2, 0.66*2.5)*x
distHigh = c(0.5, 1, 1.5, 2, 2.5)*x
CO2Low = sum(1.8*distLow/(21.0*0.634 + 17.0*0.366)*8.8)
CO2High = sum(1.8*distHigh/(21.0*0.634 + 17.0*0.366)*8.8)
ghg_OtherLow = CO2Low/19
ghg_OtherHigh = CO2High/19
cold_startLow = ifelse(CO2Low > 0.0, 0.035,CO2Low)
cold_startHigh = ifelse(CO2High > 0.0, 0.035,CO2High)
ghgLow <- CO2Low + ghg_OtherLow + cold_startLow
ghgHigh <- CO2High + ghg_OtherHigh + cold_startHigh
return(list("ghgLow" = ghgLow, "ghgHigh" = ghgHigh))
}
ghgReduction(bufferByModeDF$autoReduced)
ghgReduction(bufferByModeDF$autoReduced)*180
ghgReduction(bufferByModeDF$autoReduced)$ghgLow*180
ghgReduction(bufferByModeDF$autoReduced)$ghgHigh*180
source("compile.R")
ghgReductionLowHigh = ghgReduction(bufferByModeDF$autoReduced)
ghgReductionLowHigh
annualGHGreductionHigh = ghgReductionLowHigh$ghgLow*180
School_Name
annualGHGreductionHigh
ghgReductionLowHigh
ghgBufferDFgeneric
str(ghgBufferDFgeneric)
ghgBufferDF
ghgBufferDFgeneric
ghgBufferDF
ghgBufferDFgeneric
str(ghgBufferDFgeneric)
annualGHGcurrent = sum(ghgBufferDFgeneric$ghgEst)
annualGHGcurrent = sum(as.numeric(ghgBufferDFgeneric$ghgEst))
annualGHGcurrent
totGhGest
annualGHGreductionLowPct = 100*annualGHGreductionLow/totGhGest
annualGHGreductionLowPct = 100*annualGHGreductionHigh/totGhGest
ghgReductionLowHigh = ghgReduction(bufferByModeDF$autoReduced)
annualGHGreductionLow = ghgReductionLowHigh$ghgLow*180
annualGHGreductionHigh = ghgReductionLowHigh$ghgLow*180
annualGHGcurrent = sum(as.numeric(ghgBufferDFgeneric$ghgEst))
annualGHGreductionLowPct = 100*annualGHGreductionLow/totGhGest
annualGHGreductionLowPct = 100*annualGHGreductionHigh/totGhGest
annualGHGreductionLowPct
annualGHGreductionLowPct
annualGHGreductionHighPct = 100*annualGHGreductionHigh/totGhGest
annualGHGreductionHighPct
annualGHGreductionHigh
annualGHGreductionLow
ghgReductionLowHigh = ghgReduction(bufferByModeDF$autoReduced)
annualGHGreductionLow = ghgReductionLowHigh$ghgLow*180
annualGHGreductionHigh = ghgReductionLowHigh$ghgHigh*180
annualGHGcurrent = sum(as.numeric(ghgBufferDFgeneric$ghgEst))
annualGHGreductionLowPct = 100*annualGHGreductionLow/totGhGest
annualGHGreductionHighPct = 100*annualGHGreductionHigh/totGhGest
annualGHGreductionHighPct
bufferByModeDF
source("compile.R")
School_Name
source("compile.R")
View(Enrollment)
View(enrollment12_13)
enrollment12_13[grep("Ellis",enrollment12_13$SCHOOL),]
enrollment12_13[grep("Gates",enrollment12_13$SCHOOL),]
ORG_CODES
source("compile.R")
source("compile.R")
384*2 + 105*2
(384*2)/978
100-78
bufferByModeDF
226*0.05
mByBuffer_table
mSb_df_for_latex
rangeBufferDF
bufferByModeDF
rangeBufferDF
source("compile.R")
rangeBufferDF
source("compile.R")
source("compile.R")
fix(round_char)
fix(thousands_sep)
fix(thousands_sep)
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
374*.61
228 - 34
228 - 83
145 + 194
.3*264
79+79-34
124 + 194 + 145
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
