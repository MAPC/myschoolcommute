.(Mode,Buffer),
summarise,
Estimate = sum(Surveyed*Enroll/Grade_Surveyed,na.rm=T))
View(gmSbse_df)
gmSbse_df <- ddply(gmSbse_df,
.(Grade,Time),
transform,
Grade_Surveyed = sum(Surveyed))
gmSbse_df <- mergeDF(gmSbse_df,
et_df,
data.column1 = "Enroll",
data.column2 = "value",
by.x = "Grade",
by.y = "variable")
gmSbse_df <-  subset(gmSbse_df,Enroll > 0)
gmSbse_df <-  droplevels(gmSbse_df)
mSb_df <- ddply(gmSbse_df,
.(Mode,Buffer),
summarise,
Estimate = sum(Surveyed*Enroll/Grade_Surveyed,na.rm=T))
mSb_df
# mb_df will have three columns
# Columns:
# Buffer: 0.5, 1.0, 1.5, 2.0, 2.0+
# Mode: "Auto" "School Bus" "Walk"
# Surveyed: Number of Students Surveyed
# Enroll: Students enrolled
gmSbse_df <- gmSbse_df_create()
# 2:
# Count students by grade, buffer, and ModeToMod/ModeFromMod.
# Columns:
# Grade = grade level
# BUFF_DIST = Buffer
# ModeTo = Mode to school
# freq = count of students
gbmTS_df_temp <- count(DF,.(grade,BUFF_DIST,ModeToMod))
gbmFS_df_temp <- count(DF,.(grade,BUFF_DIST,ModeFromMod))
# 3
# fill in Surveyed column in gbse_df
gmSbse_df[gmSbse_df$Time=="Morning",] <- mergeDF(gmSbse_df[gmSbse_df$Time=="Morning",],
gbmTS_df_temp,
data.column1 = "Surveyed",
data.column2 = "freq",
by.x = c("Grade","Buffer","Mode"),
by.y = c("grade","BUFF_DIST","ModeToMod"))
gmSbse_df[gmSbse_df$Time=="Afternoon",] <- mergeDF(gmSbse_df[gmSbse_df$Time=="Afternoon",],
gbmFS_df_temp,
data.column1 = "Surveyed",
data.column2 = "freq",
by.x = c("Grade","Buffer","Mode"),
by.y = c("grade","BUFF_DIST","ModeFromMod"))
# 3:
mSb_df <- ddply(gmSbse_df,
.(Mode,Buffer),
summarise,
Estimate = sum(Surveyed*Enroll/Grade_Surveyed,na.rm=T))
# mb_df will have three columns
# Columns:
# Buffer: 0.5, 1.0, 1.5, 2.0, 2.0+
# Mode: "Auto" "School Bus" "Walk"
# Surveyed: Number of Students Surveyed
# Enroll: Students enrolled
gmSbse_df <- gmSbse_df_create()
# 2:
# Count students by grade, buffer, and ModeToMod/ModeFromMod.
# Columns:
# Grade = grade level
# BUFF_DIST = Buffer
# ModeTo = Mode to school
# freq = count of students
gbmTS_df_temp <- count(DF,.(grade,BUFF_DIST,ModeToMod))
gbmFS_df_temp <- count(DF,.(grade,BUFF_DIST,ModeFromMod))
# 3
# fill in Surveyed column in gbse_df
gmSbse_df[gmSbse_df$Time=="Morning",] <- mergeDF(gmSbse_df[gmSbse_df$Time=="Morning",],
gbmTS_df_temp,
data.column1 = "Surveyed",
data.column2 = "freq",
by.x = c("Grade","Buffer","Mode"),
by.y = c("grade","BUFF_DIST","ModeToMod"))
gmSbse_df[gmSbse_df$Time=="Afternoon",] <- mergeDF(gmSbse_df[gmSbse_df$Time=="Afternoon",],
gbmFS_df_temp,
data.column1 = "Surveyed",
data.column2 = "freq",
by.x = c("Grade","Buffer","Mode"),
by.y = c("grade","BUFF_DIST","ModeFromMod"))
# 3:
# Add Column:
# Grade_Surveyed = Total Students Surveyed By Grade
gmSbse_df <- ddply(gmSbse_df,
.(Grade,Time),
transform,
Grade_Surveyed = sum(Surveyed))
# 4:
# Merge gmSbse_df with et_df: Enrollment by Grade
# Fills
# Column
# Enroll
gmSbse_df <- mergeDF(gmSbse_df,
et_df,
data.column1 = "Enroll",
data.column2 = "value",
by.x = "Grade",
by.y = "variable")
gmSbse_df <-  subset(gmSbse_df,Enroll > 0)
gmSbse_df <-  droplevels(gmSbse_df)
# 6:
# Sum students by buffer
mSb_df <- ddply(gmSbse_df,
.(Mode,Buffer),
summarise,
Estimate = sum(Surveyed*Enroll/Grade_Surveyed,na.rm=T))
mSb_df
gmSbse_df_create <- function(){
gmbse_df <- data.frame(Grade = rep(grades, times = length(buffers)*length(modeSimple)),
Buffer = rep(rep(buffers,each=length(grades)),times=length(modeSimple)),
Mode = rep(modeSimple,each=length(buffers)*length(grades)),
Surveyed = 0,
Enroll = 0,
Pct = 0)
return(gmbse_df)
}
gmSbse_df <- gmSbse_df_create()
gmSbse_df
gbmTS_df_temp <- count(DF,.(grade,BUFF_DIST,ModeToMod))
gmSbse_df <- mergeDF(gmSbse_df,
gbmTS_df_temp,
data.column1 = "Surveyed",
data.column2 = "freq",
by.x = c("Grade","Buffer","Mode"),
by.y = c("grade","BUFF_DIST","ModeToMod"))
gmSbse_df <- ddply(gmSbse_df,
.(Grade),
transform,
Grade_Surveyed = sum(Surveyed))
gmSbse_df <- mergeDF(gmSbse_df,
et_df,
data.column1 = "Enroll",
data.column2 = "value",
by.x = "Grade",
by.y = "variable")
gmSbse_df <-  subset(gmSbse_df,Enroll > 0)
gmSbse_df <-  droplevels(gmSbse_df)
mSb_df <- ddply(gmSbse_df,
.(Mode,Buffer),
summarise,
Estimate = sum(Surveyed*Enroll/Grade_Surveyed,na.rm=T))
mSb_df
sum(mSb_df$Estimate)
modeDFwideFunction(mSb_df)
220.96394 + 117.70737 + 101.35857 + 75.149527
names(mSb_df)
modeDFwideFunction <- function(df){
modeDFWide <- dcast(melt(mSb_df, id.vars=c("Mode", "Buffer")),
Mode ~ Buffer,
subset = .(variable == "Estimate"))
modeDFWide$Mode <- as.character(modeDFWide$Mode)
numBuffers <- length(buffers)
modeDFWide <- rbind(modeDFWide,c("Total",sapply(modeDFWide[,buffers],sum)))
modeDFWide[,2:(numBuffers + 1)] <- lapply(modeDFWide[,2:(numBuffers + 1)],as.numeric)
modeDFWidePct <- pctByColDF(modeDFWide[,2:(numBuffers+1)])
modeDFWidePct <- pctFormat(modeDFWidePct)
modeDFWide <- cbind(modeDFWide,modeDFWidePct)
names(modeDFWide)[1] <- ""
return(modeDFWide)
}
modeDFwideFunction(mSb_df)
220.96394 + 117.70737 + 101.35857 + 75.149527 + 25.820587
mSb_df_wide[,2:6] <- as.character(round(mSb_df_wide[,2:6],0))
mSb_df_wide <- modeDFwideFunction(mSb_df)
mSb_df_wide[,2:6] <- as.character(round(mSb_df_wide[,2:6],0))
mSb_df_wide
mSb_df_wide <- modeDFwideFunction(mSb_df)
mSb_df_wide[,2:6] <- round(mSb_df_wide[,2:6],0)
mSb_df_wide
mSb_df_wide[,2:6] <- lapply(mSb_df_wide[,2:6],as.character)
source("compile.R")
modeByBufferTable <- latex(mSb_df_wide,
file="",
cgroup = c("",
"Estimated Trips by Walkshed",
"Percents"),
n.cgroup = c(1,5,5),
first.hline.double = FALSE,
rowname = NULL,
where="!htbp",
col.just=c("l",rep("r",8))
)
mSb_df_wide
modeByBufferTable <- latex(mSb_df_wide,
file="",
cgroup = c("",
"Estimated Trips by Walkshed",
"Percents"),
n.cgroup = c(1,5,5),
first.hline.double = FALSE,
rowname = NULL,
where="!htbp",
col.just=c("l",rep("r",5))
)
modeByBufferTable <- latex(mSb_df_wide,
file="",
cgroup = c("",
"Estimated Trips by Walkshed",
"Percents"),
n.cgroup = c(1,5,5),
first.hline.double = FALSE,
rowname = NULL,
where="!htbp",
col.just=c("l",rep("r",10))
)
source("compile.R")
mSb_df
mByBuffer1 <- ggplot(data = mSb_df,
aes(x = Buffer,
y = Estimate,
fill = Mode))
mByBuffer2 <- mByBuffer1 + geom_bar(stat = "identity")
mByBuffer3 <- mByBuffer2 + labs(title = paste("Students by Walkshed and Morning Travel Mode\n",
School_Name,sep=""),
y = "Estimated Number of Trips, Morning Commute")
mByBuffer4 <- mByBuffer3 + scale_fill_manual("",
values = c("#D9A09A","#F2E8A5","#A3BAA7"),
labels = c("Auto", "School Bus", "Walk"))
mByBuffer5 <- mByBuffer4 + theme_minimal()
mByBuffer5
source("compile.R")
source("compile.R")
avgDistToSchool
mean(DF$distEst,na.rm=TRUE)
?round
avgDistToSchool <- round(mean(DF$distEst,na.rm=TRUE,digits = 2))
avgDistToSchool
avgDistToSchool <- round(mean(DF$distEst,na.rm=TRUE,digits = 3))
avgDistToSchool''
avgDistToSchool
mean(DF$distEst,na.rm=TRUE)
avgDistToSchool <- round(mean(DF$distEst,na.rm=TRUE),digits = 2)
avgDistToSchool
source("compile.R")
source("calculate_GHG.R")
ghgBufferDFgeneric <- data.frame(Buffer = buffers,
Students = 0,
Ghg_Total = 0)
ghgBufferDF <- ddply(DF,
.(BUFF_DIST),
summarise,
students = length(id),
ghg_Total = 180*sum(ghg_Total))
ghgBufferDF
ghgBufferDF <- ghgBufferDF[!is.na(ghgBufferDF$BUFF_DIST) & ghgBufferDF$BUFF_DIST != "",]
ghgBufferDFgeneric <-   mergeDF(ghgBufferDFgeneric,
ghgBufferDF,
data.column1 = "Students",
data.column2 = "students",
by.x = "Buffer",
by.y = "BUFF_DIST")
ghgBufferDFgeneric
ghgBufferDFgeneric <-   mergeDF(ghgBufferDFgeneric,
ghgBufferDF,
data.column1 = "Ghg_Total",
data.column2 = "ghg_Total",
by.x = "Buffer",
by.y = "BUFF_DIST")
Enroll_Total
ghgBufferDFgeneric$studentsEst <- round(enrollTotal*ghgBufferDFgeneric$Students/(sum(ghgBufferDFgeneric$Students)),0)
ghgBufferDFgeneric$ghgEst <- ghgBufferDFgeneric$studentsEst*ghgBufferDFgeneric$Ghg_Total/ghgBufferDFgeneric$Students
ghgBufferDFgeneric$ghgEstPerCap <- ghgBufferDFgeneric$ghgEst/ghgBufferDFgeneric$studentsEst
ghgBufferDFgeneric$PctTotGHG <- ghgBufferDFgeneric$ghgEst/sum(ghgBufferDFgeneric$ghgEst)
ghgPerCap10Buffer <-
(sum(ghgBufferDFgeneric$ghgEstPerCap[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")]*
ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")]))/
sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")])
ghgPerCap10PlusBuffer <-
(sum(ghgBufferDFgeneric$ghgEstPerCap[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")]*
ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")]))/
sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")])
ghgPerCap <- sum(ghgBufferDFgeneric$ghgEst)/sum(ghgBufferDFgeneric$studentsEst)
ghgBufferDFgeneric$PctTotGHGprint <- addPct(100*ghgBufferDFgeneric$PctTotGHG)
ghgBufferDFgeneric$ghgEst <- round(ghgBufferDFgeneric$ghgEst,0)
ghgBufferDFgeneric$ghgEstPerCap <- round(ghgBufferDFgeneric$ghgEstPerCap,0)
ghgBufferDFgeneric[,2:6] <- lapply(ghgBufferDFgeneric[,2:6],as.character)
ghgBufferDFgeneric
############### Begin GHG Section ###################
source("calculate_GHG.R")
ghgBufferDFgeneric <- data.frame(Buffer = buffers,
Students = 0,
Ghg_Total = 0)
ghgBufferDF <- ddply(DF,
.(BUFF_DIST),
summarise,
students = length(id),
ghg_Total = 180*sum(ghg_Total))
ghgBufferDF <- ghgBufferDF[!is.na(ghgBufferDF$BUFF_DIST) & ghgBufferDF$BUFF_DIST != "",]
ghgBufferDFgeneric <-   mergeDF(ghgBufferDFgeneric,
ghgBufferDF,
data.column1 = "Students",
data.column2 = "students",
by.x = "Buffer",
by.y = "BUFF_DIST")
ghgBufferDFgeneric <-   mergeDF(ghgBufferDFgeneric,
ghgBufferDF,
data.column1 = "Ghg_Total",
data.column2 = "ghg_Total",
by.x = "Buffer",
by.y = "BUFF_DIST")
ghgBufferDFgeneric$studentsEst <- round(enrollTotal*ghgBufferDFgeneric$Students/(sum(ghgBufferDFgeneric$Students)),0)
ghgBufferDFgeneric$ghgEst <- ghgBufferDFgeneric$studentsEst*ghgBufferDFgeneric$Ghg_Total/ghgBufferDFgeneric$Students
ghgBufferDFgeneric$ghgEstPerCap <- ghgBufferDFgeneric$ghgEst/ghgBufferDFgeneric$studentsEst
ghgBufferDFgeneric$PctTotGHG <- ghgBufferDFgeneric$ghgEst/sum(ghgBufferDFgeneric$ghgEst)
ghgPerCap10Buffer <-
(sum(ghgBufferDFgeneric$ghgEstPerCap[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")]*
ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")]))/
sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")])
ghgPerCap10PlusBuffer <-
(sum(ghgBufferDFgeneric$ghgEstPerCap[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")]*
ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")]))/
sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")])
ghgPerCap <- sum(ghgBufferDFgeneric$ghgEst)/sum(ghgBufferDFgeneric$studentsEst)
ghgBufferDFgeneric$PctTotGHGprint <- addPct(100*ghgBufferDFgeneric$PctTotGHG)
ghgBufferDFgeneric$ghgEst <- round(ghgBufferDFgeneric$ghgEst,0)
ghgBufferDFgeneric$ghgEstPerCap <- round(ghgBufferDFgeneric$ghgEstPerCap,0)
ghgBufferDFgeneric[,2:6] <- lapply(ghgBufferDFgeneric[,2:6],as.character)
## Peer School Comparison Section
## calculate range within one mile for peer schools
## pSdF == %peer %School %data %Frame
pSdF <- compareSchTable(allSchComp,maxRange)
## pSdF == %peer %School %aggregation
pSagg <- compSchoolsData(pSdF)
pSagg <- rbind(c(oneMileSchoolRatio,
walkSchoolOneMileRatio,
ghgPerCap),pSagg)
pSagg <- cbind(c("Your School","Peer Schools"),pSagg)
names(pSagg)[1] <- ""
pSaggLatex <- pSagg
pSaggLatex$PctMile <- addPct(100*pSagg$PctMile)
pSaggLatex$PctWalkMile <- addPct(100*pSagg$PctWalkMile)
pSaggLatex$ghgPerCap <- as.character(round(pSaggLatex$ghgPerCap,0))
compareSchTable
compareSchTable
pctWithinOneMile/100
oneMileSchoolRatio <- pctWithinOneMile/100
pSdF <- compareSchTable(allSchComp,maxRange)
allSchComp  <- read.csv("allSchComp")
allSchComp  <- read.csv("allSchComp.csv")
View(allSchComp)
############### Begin GHG Section ###################
source("calculate_GHG.R")
ghgBufferDFgeneric <- data.frame(Buffer = buffers,
Students = 0,
Ghg_Total = 0)
ghgBufferDF <- ddply(DF,
.(BUFF_DIST),
summarise,
students = length(id),
ghg_Total = 180*sum(ghg_Total))
ghgBufferDF <- ghgBufferDF[!is.na(ghgBufferDF$BUFF_DIST) & ghgBufferDF$BUFF_DIST != "",]
ghgBufferDFgeneric <-   mergeDF(ghgBufferDFgeneric,
ghgBufferDF,
data.column1 = "Students",
data.column2 = "students",
by.x = "Buffer",
by.y = "BUFF_DIST")
ghgBufferDFgeneric <-   mergeDF(ghgBufferDFgeneric,
ghgBufferDF,
data.column1 = "Ghg_Total",
data.column2 = "ghg_Total",
by.x = "Buffer",
by.y = "BUFF_DIST")
ghgBufferDFgeneric$studentsEst <- round(enrollTotal*ghgBufferDFgeneric$Students/(sum(ghgBufferDFgeneric$Students)),0)
ghgBufferDFgeneric$ghgEst <- ghgBufferDFgeneric$studentsEst*ghgBufferDFgeneric$Ghg_Total/ghgBufferDFgeneric$Students
ghgBufferDFgeneric$ghgEstPerCap <- ghgBufferDFgeneric$ghgEst/ghgBufferDFgeneric$studentsEst
ghgBufferDFgeneric$PctTotGHG <- ghgBufferDFgeneric$ghgEst/sum(ghgBufferDFgeneric$ghgEst)
ghgPerCap10Buffer <-
(sum(ghgBufferDFgeneric$ghgEstPerCap[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")]*
ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")]))/
sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("0.5","1.0")])
ghgPerCap10PlusBuffer <-
(sum(ghgBufferDFgeneric$ghgEstPerCap[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")]*
ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")]))/
sum(ghgBufferDFgeneric$studentsEst[ghgBufferDFgeneric$Buffer %in% c("1.5","2.0","2.0+")])
ghgPerCap <- sum(ghgBufferDFgeneric$ghgEst)/sum(ghgBufferDFgeneric$studentsEst)
ghgBufferDFgeneric$PctTotGHGprint <- addPct(100*ghgBufferDFgeneric$PctTotGHG)
ghgBufferDFgeneric$ghgEst <- round(ghgBufferDFgeneric$ghgEst,0)
ghgBufferDFgeneric$ghgEstPerCap <- round(ghgBufferDFgeneric$ghgEstPerCap,0)
ghgBufferDFgeneric[,2:6] <- lapply(ghgBufferDFgeneric[,2:6],as.character)
## Peer School Comparison Section
## calculate range within one mile for peer schools
## pSdF == %peer %School %data %Frame
oneMileSchoolRatio <- pctWithinOneMile/100
pSdF <- compareSchTable(allSchComp,maxRange)
pSagg <- compSchoolsData(pSdF)
pSagg <- rbind(c(oneMileSchoolRatio,
walkSchoolOneMileRatio,
ghgPerCap),pSagg)
mSb_df
oneMileSchoolRatio <- pctWithinOneMile/100
pSdF <- compareSchTable(allSchComp,maxRange)
## pSdF == %peer %School %aggregation
pSagg <- compSchoolsData(pSdF)
pSagg <- compSchoolsData(pSdF)
pSagg <- rbind(c(oneMileSchoolRatio,
walkSchoolOneMileRatio,
ghgPerCap),pSagg)
b_dft
mSb_df
walkSchoolOneMileRatio <- walkSchoolOneMile/estWithinOneMile
walkSchoolOneMile <- sum(mSb_df$Estimate[mSb_df$Buffer %in% c("0.5","1.0")])
walkSchoolOneMileRatio <- walkSchoolOneMile/estWithinOneMile
pSagg <- compSchoolsData(pSdF)
pSagg <- rbind(c(oneMileSchoolRatio,
walkSchoolOneMileRatio,
ghgPerCap),pSagg)
pSagg <- cbind(c("Your School","Peer Schools"),pSagg)
names(pSagg)[1] <- ""
pSaggLatex <- pSagg
pSaggLatex$PctMile <- addPct(100*pSagg$PctMile)
pSaggLatex$PctWalkMile <- addPct(100*pSagg$PctWalkMile)
pSaggLatex$ghgPerCap <- as.character(round(pSaggLatex$ghgPerCap,0))
pSaggLatex
ghgBufferDFgeneric
pSagg
compSchoolsData
pSdF
walkSchoolOneMileRatio
estWithinOneMile
walkSchoolOneMile
mSb_df
oneMileSchoolRatio <- pctWithinOneMile/100
walkSchoolOneMile <- sum(mSb_df$Estimate[mSb_df$Buffer %in% c("0.5","1.0")] & mSb_df$Mode == "Walk")
walkSchoolOneMileRatio <- walkSchoolOneMile/estWithinOneMile
pSdF <- compareSchTable(allSchComp,maxRange)
## pSdF == %peer %School %aggregation
pSagg <- compSchoolsData(pSdF)
pSagg <- rbind(c(oneMileSchoolRatio,
walkSchoolOneMileRatio,
ghgPerCap),pSagg)
pSagg <- cbind(c("Your School","Peer Schools"),pSagg)
names(pSagg)[1] <- ""
pSaggLatex <- pSagg
pSaggLatex$PctMile <- addPct(100*pSagg$PctMile)
pSaggLatex$PctWalkMile <- addPct(100*pSagg$PctWalkMile)
pSaggLatex$ghgPerCap <- as.character(round(pSaggLatex$ghgPerCap,0))
oneMileSchoolRatio <- pctWithinOneMile/100
walkSchoolOneMile <- sum(mSb_df$Estimate[mSb_df$Buffer %in% c("0.5","1.0") & mSb_df$Mode == "Walk"])
walkSchoolOneMileRatio <- walkSchoolOneMile/estWithinOneMile
pSdF <- compareSchTable(allSchComp,maxRange)
## pSdF == %peer %School %aggregation
pSagg <- compSchoolsData(pSdF)
pSagg <- rbind(c(oneMileSchoolRatio,
walkSchoolOneMileRatio,
ghgPerCap),pSagg)
pSagg <- cbind(c("Your School","Peer Schools"),pSagg)
names(pSagg)[1] <- ""
pSaggLatex <- pSagg
pSaggLatex$PctMile <- addPct(100*pSagg$PctMile)
pSaggLatex$PctWalkMile <- addPct(100*pSagg$PctWalkMile)
pSaggLatex$ghgPerCap <- as.character(round(pSaggLatex$ghgPerCap,0))
pSaggLatex
ghgBufferDFgeneric
source("compile.R")
pSaggLatex
source("compile.R")
source("compile.R")
theme_minimal <- function(){
theme_bw(base_size = 12,base_family="") %+replace%
theme(plot.title = element_text(size = 16,
hjust = 0),
panel.border = element_blank(),
axis.line = element_line(color="grey50", size = 0.1),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1),
axis.ticks = element_line(color="grey50", size=0.1),
legend.position = "bottom",
legend.direction = "horizontal")
}
source("minimal.R")
source("source.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
source("compile.R")
getwd()
source("compile.R")
source("compile.R")
source("compile.R")
